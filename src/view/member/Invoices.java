/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Invoices.java
 *
 * Created on May 6, 2012, 5:01:37 PM
 */
package view.member;

import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import main.Main;


/**
 *
 * @author vm
 */
public class Invoices extends javax.swing.JPanel {

	protected String searchTerm;

	/** Creates new form Invoices */
	public Invoices() {
		initComponents();
	}
	
	/**
	 * Get the search term
	 * 
	 * @return The search term
	 */
	public String getSearchTerm() {
		return searchTerm;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel19 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();

        jLabel19.setFont(new java.awt.Font("Lucida Grande", 0, 18));
        jLabel19.setText("Mijn facturen");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0004", "April 2012", "€ 45,00", "30-01-2012", "Niet betaald"},
                {"0003", "Maart 2012", "€ 42,50", "31-01-2012", "Betaald"},
                {"0002", "Februari 2012", "€ 33,00", "29-01-2012", "Betaald"},
                {"0001", "Januari 2012", "€ 33,00", "31-01-2012", "Betaald"}
            },
            new String [] {
                "Factuurnummer", "Maand", "Prijs", "Datum", "Betaling"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTextFieldSearch.setText("zoekterm");
        jTextFieldSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldSearchFocusGained(evt);
            }
        });

        jButtonSearch.setText("Zoek");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jButtonReset.setText("Reset");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addContainerGap(446, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonReset)
                        .addGap(211, 211, 211))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearch)
                    .addComponent(jButtonReset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButtonReset.setVisible(false);
    }// </editor-fold>//GEN-END:initComponents

	private void jTextFieldSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSearchFocusGained
		if (this.jTextFieldSearch.getText().equals("zoekterm")) {
			this.jTextFieldSearch.setText(null);
		}
	}//GEN-LAST:event_jTextFieldSearchFocusGained

	private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
		this.searchTerm = this.jTextFieldSearch.getText().toLowerCase();
		this.jButtonReset.setVisible(true);

		// Search the table
		DefaultTableModel model = (DefaultTableModel) this.jTable1.getModel();

		RowFilter<Object, Object> startsWithAFilter = new RowFilter<Object, Object>() {

			@Override
			public boolean include(Entry<? extends Object, ? extends Object> entry) {
				Invoices invoicePage = (Invoices) Main.getApplication().getPage("invoices");
				String searchterm = invoicePage.getSearchTerm();
				for (int i = entry.getValueCount() - 1; i >= 0; i--) {
					if (entry.getStringValue(i).toLowerCase().contains(searchterm)) {
						// The value starts with "a", include it
						return true;
					}
				}
				// None of the columns start with "a"; return false so that this
				// entry is not shown
				return false;
			}
		};
		
		TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(model);
		sorter.setRowFilter(startsWithAFilter);
		this.jTable1.setRowSorter(sorter);
	}//GEN-LAST:event_jButtonSearchActionPerformed

	private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
		this.searchTerm = null;
		this.jTextFieldSearch.setText("zoekterm");
		this.jButtonReset.setVisible(false);

		// TODO: reset the search
		//DefaultTableModel model = (DefaultTableModel) this.jTable1.getModel();
		
		
	}//GEN-LAST:event_jButtonResetActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
}
